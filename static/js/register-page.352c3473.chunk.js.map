{"version":3,"sources":["pages/Register/Register.module.css","pages/Register/Register.js"],"names":["module","exports","Register","dispatch","useDispatch","isAuth","useSelector","getIsAuth","useState","name","setName","email","setEmail","password","setPassword","validate","useCallback","values","errors","test","length","confirmPassword","handleChange","target","value","reset","className","s","title","onSubmit","e","preventDefault","validationErrors","undefined","register","toast","success","position","autoClose","error","form","autoComplete","label","input","type","placeholder","onChange","required","to"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,MAAQ,wBAAwB,MAAQ,wBAAwB,MAAQ,0B,2KCQzG,SAASC,IACtB,IAAMC,EAAWC,cACXC,EAASC,YAAYC,KAC3B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAWC,uBAAY,SAAAC,GAC3B,IAAMC,EAAS,GAoBf,OAnBKD,EAAON,MAEA,2CAA2CQ,KAAKF,EAAON,SACjEO,EAAOP,MAAQ,yBAFfO,EAAOP,MAAQ,WAIZM,EAAOR,KAEDQ,EAAOR,KAAKW,OAAS,IAC9BF,EAAOT,KAAO,wCAFdS,EAAOT,KAAO,WAIXQ,EAAOJ,UAEDI,EAAOJ,SAASO,OAAS,GAAKH,EAAOJ,SAASO,OAAS,MAChEF,EAAOL,SACL,wEAHFK,EAAOL,SAAW,WAKhBI,EAAOI,kBAAoBJ,EAAOJ,WACpCK,EAAOG,gBAAkB,8BAEpBH,IACN,IAEGI,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUd,EAAoB,EAApBA,KAAMe,EAAc,EAAdA,MACtC,OAAQf,GACN,IAAK,OACH,OAAOC,EAAQc,GACjB,IAAK,QACH,OAAOZ,EAASY,GAClB,IAAK,WACH,OAAOV,EAAYU,GACrB,QACE,SAuBAC,EAAQ,WACZf,EAAQ,IACRE,EAAS,IACTE,EAAY,KAEd,OACE,qCACE,oBAAIY,UAAWC,IAAEC,MAAjB,4BACA,uBAAMC,SA3BW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAmBjB,EAAS,CAAEN,OAAME,QAAOE,kBACfoB,IAA9BD,EAAiBnB,WACnBV,EAAS+B,YAAS,CAAEzB,OAAME,QAAOE,cACjCsB,IAAMC,QAAQ,sBAAuB,CACnCC,SAAU,aACVC,UAAW,aAGmBL,IAA9BD,EAAiBnB,UACnBsB,IAAMI,MAAN,UAAeP,EAAiBnB,UAAY,CAC1CwB,SAAU,aACVC,UAAW,MAGfb,KAWgCC,UAAWC,IAAEa,KAAMC,aAAa,MAA9D,UACE,wBAAOf,UAAWC,IAAEe,MAApB,iBAEE,uBACEhB,UAAWC,IAAEgB,MACbC,KAAK,OACLnC,KAAK,OACLe,MAAOf,EACPoC,YAAY,YACZC,SAAUxB,OAGd,wBAAOI,UAAWC,IAAEe,MAApB,kBAEE,uBACEhB,UAAWC,IAAEgB,MACbC,KAAK,QACLnC,KAAK,QACLe,MAAOb,EACPkC,YAAY,aACZC,SAAUxB,OAGd,wBAAOI,UAAWC,IAAEe,MAApB,qBAEE,uBACEK,UAAQ,EACRrB,UAAWC,IAAEgB,MACbC,KAAK,WACLnC,KAAK,WACLe,MAAOX,EACPgC,YAAY,iBACZC,SAAUxB,OAGd,cAAC,IAAD,OAEDjB,GAAU,cAAC,IAAD,CAAU2C,GAAG","file":"static/js/register-page.352c3473.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Register_form__1rR2V\",\"title\":\"Register_title__3RRlG\",\"label\":\"Register_label__3aMOP\",\"input\":\"Register_input__3aHZG\"};","import { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router';\r\nimport { getIsAuth } from '../../redux/auth/auth-selectors';\r\nimport { register } from '../../redux/auth/auth-operations';\r\nimport { toast } from 'react-toastify';\r\nimport { BtnSubmit } from '../../components/Button/Button';\r\nimport s from './Register.module.css';\r\n\r\nexport default function Register() {\r\n  const dispatch = useDispatch();\r\n  const isAuth = useSelector(getIsAuth);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n \r\n  const validate = useCallback(values => {\r\n    const errors = {};\r\n    if (!values.email) {\r\n      errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.name) {\r\n      errors.name = 'Required';\r\n    } else if (values.name.length < 3) {\r\n      errors.name = 'Name should be longer then 3 symbols';\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required';\r\n    } else if (values.password.length < 8 || values.password.length > 12) {\r\n      errors.password =\r\n        'Password should be longer then 7 symbols and shorter than 12 symbols';\r\n    }\r\n    if (values.confirmPassword !== values.password) {\r\n      errors.confirmPassword = 'Password is not confirmed!';\r\n    }\r\n    return errors;\r\n  }, []);\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const validationErrors = validate({ name, email, password });\r\n    if (validationErrors.password === undefined) {\r\n      dispatch(register({ name, email, password }));\r\n      toast.success('You are registered!', {\r\n        position: 'top-center',\r\n        autoClose: 2500,\r\n      });\r\n    }\r\n    if (validationErrors.password !== undefined) {\r\n      toast.error(`${validationErrors.password}`, {\r\n        position: 'top-center',\r\n        autoClose: 4000,\r\n      });\r\n    }\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n  return (\r\n    <>\r\n      <h2 className={s.title}>Create account</h2>\r\n      <form onSubmit={handleSubmit} className={s.form} autoComplete=\"off\">\r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            placeholder=\"Your name\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Email\r\n          <input\r\n            className={s.input}\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            placeholder=\"Your email\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label className={s.label}>\r\n          Password\r\n          <input\r\n            required\r\n            className={s.input}\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            placeholder=\"Enter password\"\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <BtnSubmit />\r\n      </form>\r\n      {isAuth && <Navigate to=\"/\" />}\r\n    </>\r\n  );\r\n}"],"sourceRoot":""}